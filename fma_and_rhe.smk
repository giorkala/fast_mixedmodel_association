#!python3 
"""
Invoke as
  `snakemake -j1 -s fma_and_rhe.smk run_all -n`
  The complete pipeline for for RHE+FMA on array+imputed data, given a set of preprocessed phenotypes. 
  It supports different input and output folders. Remember to 
    a) select the right path for input and dependencies 
    b) prepare the bed/bim/fam dataset and calculate LD-scores (e.g. with GCTA)
    c) pass RHE the approprate phenotypic data
If "run_rhe" fails, the pheno/covar/fam files might not be aligned, in which case you could use `align_fam_pheno.py`.
"""
import numpy as np
import pandas as pd
import sys
sys.path.append('src')
from fma_utils import gen_uniform_anno, gen_maf_ld_anno, fix_rhe_pheno_labels

#############
BASE_PATH  = "/FIXTHIS/FMA/"
SAVE_PATH  = "/FIXTHIS/FMA/temp/"
FMA_PATH   = "/FIXTHIS/src/"
RHEMC = "/FIXTHIS/mtRHEmc"
PLINK = "/FIXTHIS/plink2_v3.5"

# parameters and options
nThreads=10 # this is mainly for FMA
file_tag="ukbb.EUR"
file_ldscores = BASE_PATH + file_tag + ".score.ld"
use_covar=True
file_covar="/FIXTHIS/covariates.tab"
file_pheno = BASE_PATH + file_tag + ".pheno"
one_pheno="Height" # one of the traits to process, we need this for some conditions
PGEN="/FIXTHIS/imputed_genotypes_V3/ukb_imp"
############

rule gen_maf_ld_anno_rhe:
  """Rule to generate the annotation file expected by RHE (typically MAF / LD stratified)"""
  input:
    ld_score = file_ldscores,
  wildcard_constraints:
    anno = "C1|rhesnp|maf005|C6|C8|C16"
  output:
    anno_out = SAVE_PATH+'fma.{geno_prefix}.{anno}.annot'
  run:
    if wildcards.anno == 'C1':
      	gen_uniform_anno(input.ld_score, output.anno_out)
    elif wildcards.anno == 'C8': # Annotation for RHE-snp analysis of complex traits
      	gen_maf_ld_anno(input.ld_score, [0.01, 0.05, 0.5], [0., 0.25, 0.5, 0.75, 1.0], output.anno_out)
    elif wildcards.anno == 'maf005':
      	gen_maf_ld_anno(input.ld_score, [0.05, 0.5], [0., 1.0], output.anno_out)
    elif wildcards.anno == 'maf4_ld2': # LD is only two bins (high/low) ~ RETRACTED
      	gen_maf_ld_anno(input.ld_score, [0, 0.005 ,0.05, 0.20, 0.5], [0., 0.5, 1.0], output.anno_out)
    elif wildcards.anno == 'C6': # LD is only two bins (high/low)
      	gen_maf_ld_anno(input.ld_score, [0, 0.05, 0.20, 0.5], [0., 0.5, 1.0], output.anno_out)
    elif wildcards.anno == 'C16': # calculate the MAF quartiles so that all the bins are balanced
      	gen_maf_ld_anno(input.ld_score, [0, 0.02752, 0.0669 , 0.21248, 0.5], [0., 0.25, 0.5, 0.75, 1.0], output.anno_out)
    else:
      raise NotImplementedError("MAF/LD Scheme not implemented yet!")

rule run_rhe:
    """Run RHE on the annotation created before and get VC estimates"""
    input:
        pheno = file_pheno,
        geno  = BASE_PATH+'{geno_prefix}.bed',
        anno  = rules.gen_maf_ld_anno_rhe.output.anno_out
    output:
        rheEst = SAVE_PATH+'fma.{geno_prefix}.{anno}.rhe'
    run:
        prefix = BASE_PATH + '%s' % wildcards.geno_prefix
        if use_covar:
            print("Will run RHE with covariates")
            shell("{RHEMC} -g {prefix} -p {input.pheno} -c {file_covar} -annot {input.anno} -k 50 -jn 10 -o {output.rheEst}")
            # make new covar/pheno files (if necessary) aligned to the .fam
            # shell("python {FMA_PATH}/align_fam_pheno.py {prefix} {input.pheno} {file_covar} {prefix}.tmp")
            # shell("{RHEMC} -g {prefix} -p {prefix}.tmp.pheno -c {prefix}.tmp.covar -annot {input.anno} -k 50 -jn 10 -o {output.rheEst}")
        else:
            print("Will run RHE without covariates")
            shell("{RHEMC} -g {prefix} -p {input.pheno} -annot {input.anno} -k 50 -jn 10 -o {output.rheEst}")
        # replace the pseudo labels with the true ones
        fix_rhe_pheno_labels( output.rheEst, input.pheno )
        
rule run_fma:
    """Run FMA on the phenotypes provided and the genotypes+annotation+VCs generated by the previous rules"""
    input:
        pheno = rules.run_rhe.input.pheno,
        anno  = rules.gen_maf_ld_anno_rhe.output.anno_out,
        VCest = rules.run_rhe.output.rheEst
    output:
        residuals = SAVE_PATH+'fma.{geno_prefix}.{anno}.loco1.residuals.gz',
        calibrators = SAVE_PATH+'fma.{geno_prefix}.{anno}.calibrators'
    run:
        if use_covar:
            shell("{FMA_PATH}/run_fma.py \
                -g {wildcards.geno_prefix} \
                -p {input.pheno} \
                -c {file_covar} \
                -a {input.anno} \
                --rheReadLog {input.VCest} \
                -o {SAVE_PATH}fma.{wildcards.geno_prefix}.{wildcards.anno} \
                --SNPtest \
                --nCalibr 2 --maxIters=20 --PoolSize 5 --nThreads {nThreads}")
        else:
            shell("{FMA_PATH}/run_fma.py \
                -g {wildcards.geno_prefix} \
                -p {input.pheno} \
                -a {input.anno} \
                --rheReadLog {input.VCest} \
                -o {SAVE_PATH}fma.{wildcards.geno_prefix}.{wildcards.anno} \
                --SNPtest \
                --nCalibr 2 --maxIters=20 --PoolSize 5 \
                --nThreads {nThreads}")
        shell("rm -f {SAVE_PATH}fma.{wildcards.geno_prefix}.{wildcards.anno}.hdf5")

rule test_for_imputed:
    "Test on imputed genotypes (PGEN) using FMA residuals"
    input:
        residuals = rules.run_fma.output.residuals,
        calibrators = rules.run_fma.output.calibrators,
    output:
        stats = SAVE_PATH+'imp.chr{chrom}.fma.{geno_prefix}.{anno}.{pheno}.sumstats.gz'
    run:
        C=wildcards.chrom
        prefix = "imp.chr%s.fma.%s.%s" % (C, wildcards.geno_prefix, wildcards.anno )
        shell("{PLINK} \
              --pgen {PGEN}\_chr{C}\_v3.pgen \
              --psam {PGEN}\_chr{C}\_v3.psam \
              --pvar {PGEN}\_chr{C}\_v3.pvar \
              --keep-fam {wildcards.geno_prefix}.fam \
              --mac 5 \
              --mach-r2-filter 0.50 2 \
              --glm allow-no-covars \
              --pheno {SAVE_PATH}fma.{wildcards.geno_prefix}.{wildcards.anno}.loco{C}.residuals.gz \
              --threads {nThreads} \
              --memory 85000 \
              --out  {SAVE_PATH}{prefix}")
        shell("python3 {FMA_PATH}/calibrate_sumstats.py stats {SAVE_PATH} {prefix} {C} {input.calibrators} {prefix}")
        shell("rm {SAVE_PATH}{prefix}*linear")           

rule run_all:
    input:
        ## run the next for RHE + FMA (residuals and calibrators)
        expand(SAVE_PATH+'fma.{geno_prefix}.{anno}.calibrators', geno_prefix={file_tag}, anno=['C8']),
        ## run the next for testing on imputed genotypes
        expand(SAVE_PATH+'imp.chr{chrom}.fma.{geno_prefix}.{anno}.{pheno}.sumstats.gz', geno_prefix={file_tag}, pheno={one_pheno}, anno=['C8'], chrom=range(1,23)),